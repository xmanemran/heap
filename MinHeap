class MinHeap {
  constructor(){
    this.data = [];
  }
  add(val){
    this.data.push(val);
    this.bubbleUp(this.data.length-1);
  }
  size(){
    return this.data.length;
  }
  top(){
    return this.data[0];
  }
  pop(){
    var min = this.data[0];
    this.data[0] = this.data.pop();
    this.bubbleDown(0);
    return min;
  }
  bubbleUp(index){
    while (index > 0) {
      var parent = Math.floor((index + 1) / 2) - 1;
      if (this.data[parent] > this.data[index]) {
        var temp = this.data[parent];
        this.data[parent] = this.data[index];
        this.data[index] = temp;
      }
      index = parent;
    }
  }
  bubbleDown(index){
    while (true) {
      var child = (index+1)*2;
      var sibling = child - 1;
      var toSwap = null;
      if (this.data[index] > this.data[child]) {
        toSwap = child;
      }
      if (this.data[index] > this.data[sibling] && (this.data[child] == null || (this.data[child] !== null && this.data[sibling] < this.data[child]))) {
          toSwap = sibling;
      }
      if (toSwap == null) {
        break;
      }
      var temp = this.data[toSwap];
      this.data[toSwap] = this.data[index];
      this.data[index] = temp;
      index = toSwap;
    }
  }
}
